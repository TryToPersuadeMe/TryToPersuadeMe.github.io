import*as THREE from"https://threejs.org/build/three.module.js";import{OrbitControls}from"https://threejs.org/examples/jsm/controls/OrbitControls.js";import{ImprovedNoise}from"https://threejs.org/examples/jsm/math/ImprovedNoise.js";const perlin=new ImprovedNoise;let scene=new THREE.Scene,camera=new THREE.PerspectiveCamera(60,innerWidth/innerHeight,.1,1e3);camera.position.set(0,2.5,60);let backColor=16744379;scene.fog=new THREE.Fog(backColor,5,60);let renderer=new THREE.WebGLRenderer({antialias:!0});renderer.setSize(innerWidth,innerHeight),document.body.appendChild(renderer.domElement);let controls=new OrbitControls(camera,renderer.domElement);controls.target.set(0,1,0),controls.update();let light=new THREE.DirectionalLight(16751069,7);light.position.set(0,45,-200),scene.add(light,new THREE.AmbientLight(13382543,.5));let globalUniforms={time:{value:0}},sg=new THREE.CircleGeometry(20,64),sm=new THREE.MeshBasicMaterial({color:14786112,fog:!1,transparent:!0,onBeforeCompile:e=>{e.uniforms.time=globalUniforms.time,e.fragmentShader=("\n      uniform float time;\n      "+e.fragmentShader).replace("vec4 diffuseColor = vec4( diffuse, opacity );","\n        vec2 uv = vUv - 0.5;\n        float f = smoothstep(0.5, 0.475, length(uv));\n        \n        // stripes\n        vec2 sUv = uv;\n        sUv.y *= 100.;\n        float sf = (sin(sUv.y - (time * 2.)) * 0.5 + 0.5);\n        float wave = (uv.y + 0.5) * 2.;\n        float e = length(fwidth(sUv));\n        sf = 1. - smoothstep(wave - e, wave, sf);\n        //\n        vec3 col = mix(diffuse * vec3(1, 0.75, 0.875), diffuse, clamp(vUv.y * 4., 0., 1.));\n        vec4 diffuseColor = vec4( col, pow(f, 3.) * sf );\n      ")}});sm.defines={USE_UV:""};let so=new THREE.Mesh(sg,sm);so.position.copy(camera.position).setY(10).z-=250,scene.add(so);let bg=new THREE.SphereGeometry(400,64,32),bm=new THREE.MeshBasicMaterial({fog:!1,side:THREE.BackSide,onBeforeCompile:e=>{e.fragmentShader=e.fragmentShader.replace("vec4 diffuseColor = vec4( diffuse, opacity );","\n        vec2 uv = vUv;\n        vec3 c1 = vec3(1., 0.5, 0.5);\n        vec3 c2 = vec3(0, 0, 0.5);\n        float f = smoothstep(0.5, 0.575, uv.y);\n        vec3 col = mix(c1, c2, f);\n      vec4 diffuseColor = vec4( col, opacity );")}});bm.defines={USE_UV:""};let bo=new THREE.Mesh(bg,bm);scene.add(bo);let globalCounter=0,chunks=[];createChunk(0,127),createChunk(-125,127);let clock=new THREE.Clock,scrollPos=0;function createChunk(e){let o=new THREE.Group,t=new THREE.PlaneGeometry(100,125,50,125);t.rotateX(.5*-Math.PI);let n=new THREE.MeshStandardMaterial({color:127,roughness:1,metalness:.8,wireframe:!1,onBeforeCompile:e=>{e.fragmentShader=e.fragmentShader.replace("#include <fog_fragment>","\n        // http://madebyevan.com/shaders/grid/\n        vec2 coord = vUv * vec2(50., 125.);\n        vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord) / 1.5;\n        float line = min(grid.x, grid.y);\n        line = min(line, 1.0);\n        vec3 col = mix(vec3(0.5, 1, 1), gl_FragColor.rgb, line);\n        gl_FragColor = vec4( col, opacity);\n        \n        #ifdef USE_FOG\n          #ifdef FOG_EXP2\n            float fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n          #else\n            float fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n          #endif\n          if (fogDepth > fogFar + 50.) discard;\n          gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n        #endif\n      ")}});n.defines={USE_UV:""};let r=new THREE.Mesh(t,n);o.add(r),o.position.z=e,updateChunk(o),chunks.push(o),scene.add(o)}function updateChunk(e){let o=e.children[0].geometry,t=o.attributes.position,n=o.attributes.uv,r=new THREE.Vector2,s=new THREE.Vector2(10,25);for(let e=0;e<t.count;e++){r.fromBufferAttribute(n,e);let o=smoothstep(.005,.125,Math.abs(r.x-.5));r.multiply(s),r.y+=s.y*globalCounter;let i=.5*perlin.noise(r.x,r.y,1)+.5;t.setY(e,45*Math.pow(i,5)*o)}o.computeVertexNormals(),t.needsUpdate=!0,globalCounter++}function smoothstep(e,o,t){var n=Math.max(0,Math.min(1,(t-e)/(o-e)));return n*n*(3-2*n)}function onWindowResize(){camera.aspect=innerWidth/innerHeight,camera.updateProjectionMatrix(),renderer.setSize(innerWidth,innerHeight)}window.addEventListener("scroll",()=>{scrollPos=window.scrollY,console.log(scrollPos)}),console.log(document.querySelector("div").offsetHeight),renderer.setAnimationLoop(e=>{clock.getDelta();renderer.setClearColor(backColor),so.scale.x=1+1e-4*scrollPos,so.scale.y=1+1e-4*scrollPos;let o=.007*scrollPos;chunks.forEach(e=>{if(e.position.z=o,e.position.z>125){let o=e.position.z%125;console.log("Asd"),e.position.z=-125+o,updateChunk(e)}renderer.render(scene,camera)})});