<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512"><script>// Catch errors if signal is already set by user agent or other extension try { Object.defineProperty(navigator, &apos;globalPrivacyControl&apos;, { value: false, enumerable: true }) // Remove script tag after execution document.currentScript.parentElement.removeChild(document.currentScript) } catch (e) {}</script><path d="M467 61H45C20.218 61 0 81.196 0 106v300c0 24.72 20.128 45 45 45h422c24.72 0 45-20.128 45-45V106c0-24.72-20.128-45-45-45zm-6.214 30L256.954 294.833 51.359 91h409.427zM30 399.788V112.069l144.479 143.24L30 399.788zM51.213 421l144.57-144.57 50.657 50.222c5.864 5.814 15.327 5.795 21.167-.046L317 277.213 460.787 421H51.213zM482 399.787L338.213 256 482 112.212v287.575z" fill="#fff" data-original="#000000" xmlns="http://www.w3.org/2000/svg"/><script>try { Object.defineProperty(screen, &quot;availTop&quot;, { value: 0 }); } catch (e) {} try { Object.defineProperty(screen, &quot;availLeft&quot;, { value: 0 }); } catch (e) {} try { Object.defineProperty(screen, &quot;availWidth&quot;, { value: 1920 }); } catch (e) {} try { Object.defineProperty(screen, &quot;availHeight&quot;, { value: 1080 }); } catch (e) {} try { Object.defineProperty(screen, &quot;colorDepth&quot;, { value: 24 }); } catch (e) {} try { Object.defineProperty(screen, &quot;pixelDepth&quot;, { value: 24 }); } catch (e) {} try { Object.defineProperty(navigator, &quot;keyboard&quot;, { value: undefined }); } catch (e) {} try { Object.defineProperty(navigator, &quot;hardwareConcurrency&quot;, { value: 8 }); } catch (e) {} try { Object.defineProperty(navigator, &quot;deviceMemory&quot;, { value: 8 }); } catch (e) {} try { Object.defineProperty(navigator, &quot;webkitTemporaryStorage&quot;, { value: undefined }); } catch (e) {} try { Object.defineProperty(navigator, &quot;webkitPersistentStorage&quot;, { value: undefined }); } catch (e) {} try { Object.defineProperty(navigator, &quot;appVersion&quot;, { value: &quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Brave Chrome/83.0.4103.116 Safari/537.36&quot; }); } catch (e) {} try { Object.defineProperty(navigator, &quot;doNotTrack&quot;, { value: null }); } catch (e) {} navigator.getBattery = function getBattery () { let battery = {&quot;charging&quot;:true,&quot;chargingTime&quot;:0,&quot;dischargingTime&quot;:null,&quot;level&quot;:1} try { Object.defineProperty(battery, &apos;onchargingchange&apos;, { enumerable: true, configurable: false, writable: false, value: undefined }) } catch (e) {} try { Object.defineProperty(battery, &apos;onchargingtimechange&apos;, { enumerable: true, configurable: false, writable: false, value: undefined }) } catch (e) {} try { Object.defineProperty(battery, &apos;ondischargingtimechange&apos;, { enumerable: true, configurable: false, writable: false, value: undefined }) } catch (e) {} try { Object.defineProperty(battery, &apos;onlevelchange&apos;, { enumerable: true, configurable: false, writable: false, value: undefined }) } catch (e) {} battery.addEventListener = function addEventListener () { return } return Promise.resolve(battery) } try { window.screenY = 0 } catch (e) { } try { window.screenTop = 0 } catch (e) { } try { window.top.window.outerHeight = window.screen.height } catch (e) { } try { window.screenX = 0 } catch (e) { } try { window.screenLeft = 0 } catch (e) { } try { window.top.window.outerWidth = window.screen.width } catch (e) { }</script></svg>